/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CoffeShop;

/**
 *
 * @author James
 */
//import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.LayoutStyle;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class Dashboard extends javax.swing.JFrame {

    private ProductMethods productMethods;
    private UserAuthenticate authenticatedUser;

    private UserAuthenticate loggedInUser; // Store the use
    private int currentPage = 1; // Start on the first page
    private static final int PAGE_SIZE = 9; // Number of products per page
    private boolean isCoffeeGridOpen = false; // To track if coffee grid is open
    private boolean isTeaGridOpen = false;   // To track if tea grid is open
    private boolean isSnackGridOpen = false;  // To track if snack grid is open

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents(); // Call method to initialize components
        productMethods = new ProductMethods();
        setTitle("Dashboard");
        displayProductsForTab("Coffee"); // Default to Coffee tab

        // Load the icon for the dashboard window
        ImageIcon icon = IconLoader.getIcon();
        Image img = icon.getImage();
        setIconImage(img);

        setIconImage(img);
        productMethods = new ProductMethods();
        GridLayoutDisplay();

        searchText.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                handleSearch();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                handleSearch();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                handleSearch();
            }
        });

        searchText.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    // Trigger the login action when Enter is pressed
                    btnSearchActionPerformed(null);
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new javax.swing.JPanel();
        employeeRoleTxt = new javax.swing.JLabel();
        UserImageIcon = new javax.swing.JLabel();
        employeNamerTxt = new javax.swing.JLabel();
        navbarLeft = new javax.swing.JPanel();
        btnOption = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        itemDetails = new javax.swing.JPanel();
        centerPanel = new javax.swing.JPanel();
        searchBar = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        coffeeGrid = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        teaGrid = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        snackGrid = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nxtButton = new javax.swing.JButton();
        pageLabelTxt = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        totalLabel = new javax.swing.JLabel();
        amountLabel = new javax.swing.JLabel();
        changeLabel = new javax.swing.JLabel();
        totalFld = new javax.swing.JTextField();
        amountFld = new javax.swing.JTextField();
        changeFld = new javax.swing.JTextField();
        btnPay = new javax.swing.JButton();
        vatFld = new javax.swing.JTextField();
        btnRemove = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        subtotalFld = new javax.swing.JTextField();
        productTable = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        header.setBackground(new java.awt.Color(81, 56, 33));

        employeeRoleTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        employeeRoleTxt.setForeground(new java.awt.Color(255, 255, 255));
        employeeRoleTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        employeeRoleTxt.setText("Role");

        UserImageIcon.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        UserImageIcon.setForeground(new java.awt.Color(255, 255, 255));
        UserImageIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UserImageIcon.setText("User");

        employeNamerTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        employeNamerTxt.setForeground(new java.awt.Color(255, 255, 255));
        employeNamerTxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        employeNamerTxt.setText("Employee Name");

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap(944, Short.MAX_VALUE)
                .addComponent(employeeRoleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(employeNamerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(UserImageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeRoleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeNamerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
            .addGroup(headerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UserImageIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(header, java.awt.BorderLayout.PAGE_START);

        navbarLeft.setBackground(new java.awt.Color(255, 192, 135));

        btnOption.setBackground(new java.awt.Color(255, 192, 135));

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/report.png"))); // NOI18N
        jButton2.setText("Reports");
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHideActionText(true);
        jButton2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton2.setPreferredSize(new java.awt.Dimension(80, 35));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/menu.png"))); // NOI18N
        jButton1.setText("Menu");
        jButton1.setToolTipText("");
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jButton1.setPreferredSize(new java.awt.Dimension(80, 35));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/product.png"))); // NOI18N
        jButton3.setText("Products");
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton3.setPreferredSize(new java.awt.Dimension(80, 35));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/employee.png"))); // NOI18N
        jButton4.setText("Employees");
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton4.setPreferredSize(new java.awt.Dimension(80, 35));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnOptionLayout = new javax.swing.GroupLayout(btnOption);
        btnOption.setLayout(btnOptionLayout);
        btnOptionLayout.setHorizontalGroup(
            btnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnOptionLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(btnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        btnOptionLayout.setVerticalGroup(
            btnOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnOptionLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout navbarLeftLayout = new javax.swing.GroupLayout(navbarLeft);
        navbarLeft.setLayout(navbarLeftLayout);
        navbarLeftLayout.setHorizontalGroup(
            navbarLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navbarLeftLayout.createSequentialGroup()
                .addComponent(btnOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        navbarLeftLayout.setVerticalGroup(
            navbarLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarLeftLayout.createSequentialGroup()
                .addComponent(btnOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 566, Short.MAX_VALUE))
        );

        getContentPane().add(navbarLeft, java.awt.BorderLayout.LINE_START);

        itemDetails.setBackground(new java.awt.Color(255, 192, 135));

        centerPanel.setBackground(new java.awt.Color(142, 104, 69));

        searchBar.setBackground(new java.awt.Color(255, 245, 238));
        searchBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        searchText.setBackground(new java.awt.Color(255, 245, 238));
        searchText.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        searchText.setForeground(new java.awt.Color(142, 104, 69));
        searchText.setText("Search");
        searchText.setToolTipText("");
        searchText.setBorder(null);
        searchText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        searchText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFocusLost(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(142, 104, 69));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(142, 104, 69));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/search.png"))); // NOI18N
        btnSearch.setBorder(null);
        btnSearch.setBorderPainted(false);
        btnSearch.setContentAreaFilled(false);
        btnSearch.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnSearch.setIconTextGap(20);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchBarLayout = new javax.swing.GroupLayout(searchBar);
        searchBar.setLayout(searchBarLayout);
        searchBarLayout.setHorizontalGroup(
            searchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchBarLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(searchText, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch)
                .addContainerGap())
        );
        searchBarLayout.setVerticalGroup(
            searchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(searchBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(searchText))
                .addGap(27, 27, 27))
        );

        jTabbedPane2.setBackground(new java.awt.Color(142, 104, 69));
        jTabbedPane2.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane2.setToolTipText("");
        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jTabbedPane2.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jTabbedPane2.setOpaque(true);
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });

        coffeeGrid.setBackground(new java.awt.Color(255, 245, 238));
        coffeeGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                coffeeGridMouseClicked(evt);
            }
        });
        coffeeGrid.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coffeeGridPropertyChange(evt);
            }
        });
        coffeeGrid.setLayout(new java.awt.GridLayout(0, 3));
        jScrollPane1.setViewportView(coffeeGrid);

        jTabbedPane2.addTab("Coffee", jScrollPane1);

        teaGrid.setLayout(new java.awt.GridLayout(0, 3));
        jScrollPane2.setViewportView(teaGrid);

        jTabbedPane2.addTab("Tea", jScrollPane2);

        snackGrid.setLayout(new java.awt.GridLayout(0, 3));
        jScrollPane3.setViewportView(snackGrid);

        jTabbedPane2.addTab("Snacks", jScrollPane3);

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nxtButton.setText("Next");
        nxtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nxtButtonActionPerformed(evt);
            }
        });

        pageLabelTxt.setText("0");

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTabbedPane2)
                            .addComponent(searchBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(previousButton)
                        .addGap(18, 18, 18)
                        .addComponent(pageLabelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(nxtButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nxtButton)
                    .addComponent(previousButton)
                    .addComponent(pageLabelTxt))
                .addGap(10, 10, 10))
        );

        jPanel1.setBackground(new java.awt.Color(255, 192, 135));

        totalLabel.setText("Sub Total:");

        amountLabel.setText("Amount");

        changeLabel.setText("Change:");

        totalFld.setEditable(false);
        totalFld.setText("0");
        totalFld.setActionCommand("<Not Set>");
        totalFld.setAutoscrolls(false);
        totalFld.setEnabled(false);

        amountFld.setText("0");
        amountFld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountFldKeyReleased(evt);
            }
        });

        changeFld.setEditable(false);
        changeFld.setText("0");
        changeFld.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeFldActionPerformed(evt);
            }
        });

        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        vatFld.setEditable(false);
        vatFld.setText("0");
        vatFld.setEnabled(false);

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel1.setText("Vat 12%:");

        jLabel2.setText("Total:");

        subtotalFld.setEditable(false);
        subtotalFld.setText("0");
        subtotalFld.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(totalLabel))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(totalFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(amountLabel)
                                .addGap(82, 82, 82)
                                .addComponent(changeLabel))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(changeFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPay))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subtotalFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(102, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(vatFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(btnRemove))
                        .addGap(130, 130, 130))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(amountFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(totalLabel)
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amountLabel)
                    .addComponent(changeLabel)
                    .addComponent(totalFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemove)
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(amountFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPay)
                    .addComponent(subtotalFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vatFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Price", "Quantity", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.getTableHeader().setReorderingAllowed(false);
        productTable.setViewportView(orderTable);
        if (orderTable.getColumnModel().getColumnCount() > 0) {
            orderTable.getColumnModel().getColumn(0).setResizable(false);
            orderTable.getColumnModel().getColumn(1).setResizable(false);
            orderTable.getColumnModel().getColumn(2).setResizable(false);
            orderTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout itemDetailsLayout = new javax.swing.GroupLayout(itemDetails);
        itemDetails.setLayout(itemDetailsLayout);
        itemDetailsLayout.setHorizontalGroup(
            itemDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(itemDetailsLayout.createSequentialGroup()
                .addComponent(centerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(itemDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(itemDetailsLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(itemDetailsLayout.createSequentialGroup()
                        .addComponent(productTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        itemDetailsLayout.setVerticalGroup(
            itemDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(centerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(itemDetailsLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(itemDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(62, 62, 62))
        );

        getContentPane().add(itemDetails, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1407, 1009));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Dashboard callDashboard = new Dashboard();
        callDashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchTerm = searchText.getText().trim(); // Get the search term from the text field
        searchMenu(searchTerm);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Products callProducts = new Products(); // Instantiate without parameters
        callProducts.setAuthenticatedUser(loggedInUser); // Set the user details
        callProducts.setVisible(true);
        this.dispose(); // Close the current frame
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Employees callEmployees = new Employees(); // Instantiate without parameters
        callEmployees.setAuthenticatedUser(loggedInUser); // Set the user details
        callEmployees.setVisible(true);
        this.dispose(); // Close the current frame
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Reports callReports = new Reports(); // Instantiate without parameters
        callReports.setAuthenticatedUser(loggedInUser); // Set the user details
        callReports.setVisible(true);
        this.dispose(); // Close the current frame
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        currentPage = 1; // Reset the current page to 1
        pageLabelTxt.setText("Page: " + currentPage); // Update the label text to reflect the reset page
        GridLayoutDisplay();

        // Set user details if available
        if (loggedInUser != null) {
            setUserDetails(loggedInUser);
        } else {
            System.out.println("User details not set yet.");
        }

    }//GEN-LAST:event_formWindowOpened

    private void searchTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFocusGained
        if (searchText.getText().equals("Search")) {
            searchText.setText("");
            searchText.setForeground(Color.BLACK); // Optional: Change text color to black
        }
    }//GEN-LAST:event_searchTextFocusGained

    private void searchTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFocusLost
        if (searchText.getText().isEmpty()) {
            searchText.setText("Search");
            searchText.setForeground(Color.GRAY); // Change text color to gray
        }
    }//GEN-LAST:event_searchTextFocusLost

    private void amountFldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountFldKeyReleased
        // TODO add your handling code here:
        // Get the amount entered in the amountFld
        String amountText = amountFld.getText();

        // Try to parse the amount to a double
        try {
            double amount = Double.parseDouble(amountText);

            // Calculate the total price using your updated method
            double totalPrice = calculateTotalPrice(); // This now returns the total price

            // Calculate the change amount
            double change = amount - totalPrice;

            // Display the change in changeFld
            changeFld.setText(String.format("%.2f", change)); // Format the change to 2 decimal places

        } catch (NumberFormatException e) {
            // Handle the case where the input is not a valid double
            changeFld.setText("0.00"); // Reset changeFld if input is invalid
        }
    }//GEN-LAST:event_amountFldKeyReleased

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();

        // Clear all rows from the table
        model.setRowCount(0);

        // Reset the fields after successful sale
        amountFld.setText("0"); // Reset amount field
        changeFld.setText("0"); // Reset change field
        vatFld.setText("0"); // Reset change field
        subtotalFld.setText("0"); // Reset change field
        totalFld.setText("0"); // Reset total field (if you have a totalFld)
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();

    // Check if there are no items in the order table
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No items in the order to proceed with the payment.", "Warning", JOptionPane.WARNING_MESSAGE);
        return; // Exit if the order table is empty
    }

    // Retrieve amount and change from input fields
    double amount = 0.0;
    double amountChange = 0.0;

    try {
        amount = Double.parseDouble(amountFld.getText()); // Amount from amountFld
        amountChange = Double.parseDouble(changeFld.getText()); // Change from changeFld
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid amount or change value.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit if the input values are invalid
    }

    // Validation checks
    if (amount <= 0) {
        JOptionPane.showMessageDialog(this, "The amount must be greater than zero.", "Warning", JOptionPane.WARNING_MESSAGE);
        return; // Exit if the amount is zero or less
    }

    if (amountChange < 0) {
        JOptionPane.showMessageDialog(this, "Change cannot be negative.", "Warning", JOptionPane.WARNING_MESSAGE);
        return; // Exit if the change is negative
    }

    // Show confirmation dialog for sale
    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to proceed with this sale?",
        "Confirm Sale",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);

    if (confirm == JOptionPane.YES_OPTION) {
        // Proceed with sale if confirmed
        String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        String time = new SimpleDateFormat("HH:mm").format(new Date());
        String orderNo = generateOrderNumber(); // Helper method to generate order number
        String employeeName = loggedInUser.getName();

        // Calculate subtotal, VAT, and total
        double subtotal = calculateSubtotal(); // Helper method to calculate subtotal
        double vat = subtotal * 0.12; // Assuming VAT is 12%
        double total = subtotal + vat;

        // Get sale items from the order table
        List<SaleItem> saleItems = getSaleItemsFromOrderTable();

        // Add the sale using SalesManagementMethod
        SalesManagementMethod salesManager = new SalesManagementMethod();
        int saleId = salesManager.addSale(Integer.parseInt(loggedInUser.getId()), employeeName, subtotal, vat, total, amount, amountChange, saleItems);

        // Create a new Receipt instance and display the receipt details
        Receipt callReceipt = new Receipt();
        callReceipt.displayReceipt(date, time, String.valueOf(saleId), employeeName, saleItems, subtotal, vat, total, "Credit Card", amount, amountChange, total);

        // Make the Receipt JFrame visible
        callReceipt.setVisible(true);

        // Reset fields and table after successful sale
        resetFieldsAndTable();

        // Notify the user of a successful sale
        JOptionPane.showMessageDialog(this, "Sale added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Notify the user if the transaction is cancelled
        JOptionPane.showMessageDialog(this, "Transaction cancelled.", "Cancelled", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnPayActionPerformed

    private void resetFieldsAndTable() {
    totalFld.setText("0"); // Reset total field
    vatFld.setText("0"); // Reset VAT field
    subtotalFld.setText("0"); // Reset subtotal field
    amountFld.setText("0"); // Reset amount field
    changeFld.setText("0"); // Reset change field

    // Clear the order table
    DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
    model.setRowCount(0);
}
    
    private List<SaleItem> getSaleItemsFromOrderTable(DefaultTableModel model) {
        List<SaleItem> saleItems = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            int productId = (int) model.getValueAt(i, 0); // Assuming product ID is in the first column
            int quantity = (int) model.getValueAt(i, 1); // Assuming quantity is in the second column
            double price = (double) model.getValueAt(i, 2); // Assuming price is in the third column
            saleItems.add(new SaleItem(productId, quantity, price));
        }
        return saleItems;
    }

    private String generateOrderNumber() {
        // Implement logic to generate a unique order number, e.g., using a timestamp or counter
        return String.valueOf(System.currentTimeMillis()); // Simple example using current time
    }

    private double calculateSubtotal() {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        double subtotal = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            subtotal += (Double) model.getValueAt(i, 3); // Assuming total price is in column 3
        }
        return subtotal;
    }

    private List<SaleItem> getSaleItemsFromOrderTable() {
    List<SaleItem> saleItems = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) orderTable.getModel();

    // Loop through each row in the order table
    for (int i = 0; i < model.getRowCount(); i++) {
        try {
            // Retrieve the product details from the table
            String productName = (String) model.getValueAt(i, 0); // Product name in column 0
            double price = Double.parseDouble(model.getValueAt(i, 1).toString()); // Price in column 1
            int quantity = Integer.parseInt(model.getValueAt(i, 2).toString()); // Quantity in column 2

            // Get product ID using the helper method
            int productId = getProductIdByName(productName); 

            // Create a new SaleItem and add it to the list
            saleItems.add(new SaleItem(productId, quantity, price));

        } catch (ClassCastException | NumberFormatException e) {
            // If any conversion fails, log or handle the error
            JOptionPane.showMessageDialog(this, "Error retrieving sale items from the order table.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    return saleItems; // Return the list of SaleItem objects
    }
    
    private void nxtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nxtButtonActionPerformed
        // Check if the next page has products
        List<Product> nextPageProducts = productMethods.getProductsByCategory(getCurrentCategory(), currentPage + 1, PAGE_SIZE);

        if (!nextPageProducts.isEmpty()) {
            currentPage++; // Move to the next page
            GridLayoutDisplay(); // Refresh the display
            updateButtonStates(); // Update button states after page change
            pageLabelTxt.setText("Page: " + currentPage); // Update the label text
        } else {
            System.out.println("Cannot go to the next page; the next page is blank.");
        }
    }//GEN-LAST:event_nxtButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (currentPage > 1) {
            currentPage--; // Move to the previous page
            GridLayoutDisplay(); // Refresh the display
            updateButtonStates(); // Update button states after page change
            pageLabelTxt.setText("Page: " + currentPage); // Update the label text
        } else {
            System.out.println("Cannot go to the previous page; already on the first page.");
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void coffeeGridPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coffeeGridPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_coffeeGridPropertyChange

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        // Get the currently selected index
        int selectedIndex = jTabbedPane2.getSelectedIndex();

        // Reset current page to 1 when switching tabs
        currentPage = 1; // Reset the current page to 1
        pageLabelTxt.setText("Page: " + currentPage); // Update the label text to reflect the reset page

        // Reset all boolean values to false
        isCoffeeGridOpen = false;
        isTeaGridOpen = false;
        isSnackGridOpen = false;

        // Check which tab is selected and update the boolean values accordingly
        switch (selectedIndex) {
            case 0: // Assuming coffee tab is at index 0
                isCoffeeGridOpen = true;
                System.out.println("Coffee Grid is open: " + isCoffeeGridOpen);
                displayProductsForTab("Coffee"); // Fetch products for Coffee
                break;
            case 1: // Assuming tea tab is at index 1
                isTeaGridOpen = true;
                System.out.println("Tea Grid is open: " + isTeaGridOpen);
                displayProductsForTab("Tea"); // Fetch products for Tea
                break;
            case 2: // Assuming snack tab is at index 2
                isSnackGridOpen = true;
                System.out.println("Snack Grid is open: " + isSnackGridOpen);
                displayProductsForTab("Snacks"); // Fetch products for Snacks
                break;
            default:
                System.out.println("No valid tab selected.");
                break;
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void coffeeGridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_coffeeGridMouseClicked
        
    }//GEN-LAST:event_coffeeGridMouseClicked

    private void changeFldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeFldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeFldActionPerformed

    // Method to display products based on selected tab
    private void displayProductsForTab(String category) {
        if (productMethods == null) {
            System.err.println("productMethods is not initialized.");
            return; // Prevent NullPointerException
        }

        // Clear existing components
        coffeeGrid.removeAll();
        teaGrid.removeAll();
        snackGrid.removeAll();

        // Fetch products for the selected category
        List<Product> products = productMethods.getProductsByCategory(category, currentPage, PAGE_SIZE);

        for (Product product : products) {
            JPanel productPanel = createProductPanel(product);
            switch (category) {
                case "Coffee":
                    coffeeGrid.add(productPanel);
                    break;
                case "Tea":
                    teaGrid.add(productPanel);
                    break;
                case "Snacks":
                    snackGrid.add(productPanel);
                    break;
                default:
                    break;
            }
        }

        // Refresh the grids
        coffeeGrid.revalidate();
        coffeeGrid.repaint();
        teaGrid.revalidate();
        teaGrid.repaint();
        snackGrid.revalidate();
        snackGrid.repaint();

        // Update pagination button states after loading products
        updateButtonStates();
    }

    private void handleSearch() {
        String searchTerm = searchText.getText().trim();  // Get the search term

        if (searchTerm.isEmpty()) {
            // If the search term is empty, reset to display the full menu
            GridLayoutDisplay();
        } else {
            // Perform the search and update the grids
            searchMenu(searchTerm);
        }
    }

    private void searchMenu(String searchTerm) {
        if (searchTerm.isEmpty()) {
            GridLayoutDisplay(); // This will reset and display the full menu
            return;
        }
        // Clear the existing product displays
        coffeeGrid.removeAll();
        teaGrid.removeAll();
        snackGrid.removeAll();

        // Fetch products based on search term (not dynamically)
        List<Product> products = productMethods.searchMenuMethod(searchTerm);

        // Iterate over the products list and create UI components for each product
        for (Product product : products) {
            JPanel productPanel = createProductPanel(product);
            // Add the product panel to the corresponding grid based on the category
            switch (product.getProductCategory()) {
                case "Coffee":
                    coffeeGrid.add(productPanel);
                    break;
                case "Tea":
                    teaGrid.add(productPanel);
                    break;
                case "Snacks":
                    snackGrid.add(productPanel);
                    break;
                default:
                    break;
            }
        }

        // Refresh each grid panel
        coffeeGrid.revalidate();
        coffeeGrid.repaint();
        teaGrid.revalidate();
        teaGrid.repaint();
        snackGrid.revalidate();
        snackGrid.repaint();
    }

    // Method to update the product display based on the selected tab
    // Method to update the product display based on the selected tab
    private List<Product> GridLayoutDisplay() {
        // Clear existing components in each grid
        coffeeGrid.removeAll();
        teaGrid.removeAll();
        snackGrid.removeAll();

        // Fetch products based on the open category
        List<Product> products = new ArrayList<>();
        if (isCoffeeGridOpen) {
            products = productMethods.getProductsByCategory("Coffee", currentPage, PAGE_SIZE);
        } else if (isTeaGridOpen) {
            products = productMethods.getProductsByCategory("Tea", currentPage, PAGE_SIZE);
        } else if (isSnackGridOpen) {
            products = productMethods.getProductsByCategory("Snacks", currentPage, PAGE_SIZE);
        }

        // Check if products list is empty
        if (products.isEmpty() && currentPage > 1) {
            // If there are no products, we should go back to the previous page
            currentPage--; // Move back to the previous page
            return GridLayoutDisplay(); // Refresh and return products
        }

        // Iterate over the products list and create UI components for each product
        for (Product product : products) {
            JPanel productPanel = createProductPanel(product);
            switch (product.getProductCategory()) {
                case "Coffee":
                    coffeeGrid.add(productPanel);
                    break;
                case "Tea":
                    teaGrid.add(productPanel);
                    break;
                case "Snacks":
                    snackGrid.add(productPanel);
                    break;
                default:
                    break;
            }
        }

        // Refresh the grids after adding components
        coffeeGrid.revalidate();
        coffeeGrid.repaint();
        teaGrid.revalidate();
        teaGrid.repaint();
        snackGrid.revalidate();
        snackGrid.repaint();

        return products; // Return the list of products for further checking
    }

    private void updateButtonStates() {
        String currentCategory = getCurrentCategory(); // Get the current category

        // Get the total product count for the current category
        int totalProducts = productMethods.getTotalProductCount(currentCategory);

        // Enable or disable the previous button
        previousButton.setEnabled(currentPage > 1);

        // Enable or disable the next button
        nxtButton.setEnabled((currentPage * PAGE_SIZE) < totalProducts);
    }

    // Method to get the total product count for a specific category
    private ImageIcon resizeImage(String imagePath, int width, int height) {
        // Load the image
        ImageIcon originalIcon = new ImageIcon(imagePath);
        Image originalImage = originalIcon.getImage();

        // Resize the image
        Image resizedImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);

        // Return the resized ImageIcon
        return new ImageIcon(resizedImage);
    }

    public void setAuthenticatedUser(UserAuthenticate authenticatedUser) {
        this.authenticatedUser = authenticatedUser;
        setUserDetails(authenticatedUser); // Update UI based on user details if necessary
    }

    public void setUserDetails(UserAuthenticate authenticatedUser) {
        this.loggedInUser = authenticatedUser; // Changed variable name for clarity

        if (loggedInUser != null) {
            employeeRoleTxt.setText(loggedInUser.getRole());
            employeNamerTxt.setText(loggedInUser.getName());

            // Resize and set employee image icon
            ImageIcon userImage = resizeImage(loggedInUser.getImagePath(), 60, 60);
            UserImageIcon.setIcon(userImage);
        } else {
            System.out.println("User details not set.");
        }
    }

// Method to set loggedInUser before the form opens
    public void setLoggedInUser(UserAuthenticate authenticatedUser) {
        this.loggedInUser = authenticatedUser; // Changed variable name for clarity
    }

    private String getCurrentCategory() {
        if (isCoffeeGridOpen) {
            return "Coffee";
        } else if (isTeaGridOpen) {
            return "Tea";
        } else if (isSnackGridOpen) {
            return "Snacks";
        }
        return null; // No category is open
    }

    private JPanel createProductPanel(Product product) {
        JPanel productPanel = new JPanel();
        Color customColor = new Color(230, 155, 87);
        productPanel.setBorder(BorderFactory.createLineBorder(customColor, 1));
        productPanel.setBackground(new Color(255, 245, 238));

        // Set up image label
        JLabel imageLabel = new JLabel();
        ImageIcon productImage = new ImageIcon(product.getProductImagePath());
        Image scaledImage = resizeImage(productImage, 100, 200); // Ensure resizeImage is defined
        imageLabel.setIcon(new ImageIcon(scaledImage));
        imageLabel.setHorizontalAlignment(JLabel.CENTER);

        // Set up name and price labels
        JLabel nameLabel = new JLabel(product.getProductName());
        JLabel priceLabel = new JLabel("₱" + String.format("%.2f", product.getProductPrice()));
        Font justFont = new Font("Segoe UI", Font.BOLD, 14);
        Font boldFont = new Font("Arial", Font.PLAIN, 14);
        nameLabel.setFont(boldFont);
        priceLabel.setFont(justFont);

        // Set up quantity spinner
        JSpinner quantitySpinner = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1));

        // Set up add button
        JButton addButton = new JButton("Add");
        addButton.setBackground(new Color(255, 167, 87));
        addButton.setForeground(new Color(81, 56, 33));
        addButton.setBorderPainted(false);
        addButton.setFocusPainted(false);
        addButton.setContentAreaFilled(true);
        Font boldAdd = addButton.getFont().deriveFont(Font.BOLD);
        addButton.setFont(boldAdd);

        // Add action listener to the Add button
        addButton.addActionListener(e -> {
            String productName = product.getProductName();
            double productPrice = product.getProductPrice();
            int quantity = (int) quantitySpinner.getValue();

            if (quantity < 1) {
                JOptionPane.showMessageDialog(productPanel, "Please select a quantity greater than 0.");
                return;
            }

            // Add the product to the order table (assumed method)
            addToOrderTable(productName, quantity, productPrice);
            // Reset the spinner value back to 1
            quantitySpinner.setValue(1);
        });

        // Set up layout for the product panel
        GroupLayout productPanelLayout = new GroupLayout(productPanel);
        productPanel.setLayout(productPanelLayout);
        productPanelLayout.setHorizontalGroup(
                productPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(productPanelLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                .addComponent(imageLabel, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(nameLabel, GroupLayout.Alignment.CENTER)
                                .addGroup(productPanelLayout.createSequentialGroup()
                                        .addComponent(priceLabel, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quantitySpinner, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(addButton, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap()
        );
        productPanelLayout.setVerticalGroup(
                productPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGap(15)
                        .addComponent(nameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(imageLabel, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(productPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(priceLabel)
                                .addComponent(quantitySpinner)
                                .addComponent(addButton))
                        .addGap(15)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        productPanel.revalidate();
        productPanel.repaint();

        return productPanel;
    }

    private Image resizeImage(ImageIcon originalImage, int targetWidth, int targetHeight) {
        // Get the original dimensions
        int originalWidth = originalImage.getIconWidth();
        int originalHeight = originalImage.getIconHeight();

        // Maintain aspect ratio
        double aspectRatio = (double) originalWidth / originalHeight;
        if (originalWidth > originalHeight) {
            targetHeight = (int) (targetWidth / aspectRatio);
        } else {
            targetWidth = (int) (targetHeight * aspectRatio);
        }

        return originalImage.getImage().getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
    }

    private void addToOrderTable(String productName, int quantity, double price) {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();

        // Validate inputs
        if (productName.isEmpty() || quantity <= 0 || price <= 0) {
            JOptionPane.showMessageDialog(this, "Please provide valid product details", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Calculate total price for the new quantity
        double totalPrice = quantity * price;

        // Flag to check if the product already exists
        boolean productExists = false;

        // Check if the product already exists in the table
        for (int i = 0; i < model.getRowCount(); i++) {
            String existingProductName = (String) model.getValueAt(i, 0); // Assuming product name is in column 0
            if (existingProductName.equals(productName)) {
                // Update the quantity and total price for the existing product
                int existingQuantity = (int) model.getValueAt(i, 2); // Assuming quantity is in column 2
                double existingTotalPrice = (double) model.getValueAt(i, 3); // Assuming total price is in column 3

                // Update the quantity and total price
                model.setValueAt(existingQuantity + quantity, i, 2); // Update quantity
                model.setValueAt(existingTotalPrice + totalPrice, i, 3); // Update total price

                productExists = true;
                break; // Exit the loop as we found the product
            }
        }

        // If the product doesn't exist, add a new row
        if (!productExists) {
            model.addRow(new Object[]{
                productName, // Product Name
                price, // Price
                quantity, // Quantity
                totalPrice // Total Price
            });
        }

        // Update the total price displayed in totalFld
        calculateTotalPrice();
        updateChangeAmount();
    }

    private void updateChangeAmount() {
        // Get the amount entered in the amountFld
        String amountText = amountFld.getText();

        // Try to parse the amount to a double
        try {
            double amount = Double.parseDouble(amountText);

            // Calculate the total price using your updated method
            double totalPrice = calculateTotalPrice(); // This now returns the total price

            // Calculate the change amount
            double change = amount - totalPrice;

            // Display the change in changeFld
            changeFld.setText(String.format("%.2f", change)); // Format the change to 2 decimal places

        } catch (NumberFormatException e) {
            // Handle the case where the input is not a valid double
            changeFld.setText("0.00"); // Reset changeFld if input is invalid
        }
    }

    private double calculateTotalPrice() {
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        double totalPriceSum = 0;

        // Loop through all rows and sum the total price column (assumed to be at index 3)
        for (int i = 0; i < model.getRowCount(); i++) {
            // Assuming the total price is stored as a double in column 3
            Object totalPriceObject = model.getValueAt(i, 3);
            double rowTotalPrice = 0;

            // Check the type of total price and cast accordingly
            if (totalPriceObject instanceof Double) {
                rowTotalPrice = (Double) totalPriceObject;
            } else if (totalPriceObject instanceof Integer) {
                rowTotalPrice = (Integer) totalPriceObject; // Cast as Integer
            }

            totalPriceSum += rowTotalPrice;
        }

        // Calculate VAT (12%)
        double vat = totalPriceSum * 0.12;
        double totalPriceWithVAT = totalPriceSum + vat;

        // Display the total sum in the JTextField totalFld
        totalFld.setText(String.format("%.2f", totalPriceSum)); // Format to 2 decimal places

        // Display the Sub total sum in the JTextField totalFld
        subtotalFld.setText(String.format("%.2f", totalPriceWithVAT)); // Format to 2 decimal places

        // Display the VAT in the JTextField vatFld
        vatFld.setText(String.format("%.2f", vat)); // Format to 2 decimal places for VAT

        // Return the calculated total price including VAT
        return totalPriceWithVAT;
    }

    private void addSales() {
        // Check if there are any items in the order table
        DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No items in the order to add a sale.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve employee ID correctly
        int employeeId = 0;
        try {
            // Assuming getId() method returns the employee ID as a string
            employeeId = Integer.parseInt(loggedInUser.getId());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid employee ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if the ID is invalid
        }

        String employeeName = loggedInUser.getName();
        double subtotal = 0.0;
        double vat = 0.0; // You can define how VAT is calculated
        double total = 0.0;

        List<SaleItem> saleItems = new ArrayList<>();

        // Loop through the order table to collect sale items and calculate totals
        for (int i = 0; i < model.getRowCount(); i++) {
            String productName = (String) model.getValueAt(i, 0);
            double price = (Double) model.getValueAt(i, 1);
            int quantity = (Integer) model.getValueAt(i, 2);
            double itemTotalPrice = (Double) model.getValueAt(i, 3);

            subtotal += itemTotalPrice; // Update subtotal
            total += itemTotalPrice; // Update total

            // Create SaleItem and add to the list
            int productId = getProductIdByName(productName); // Get the product ID
            if (productId <= 0) {
                JOptionPane.showMessageDialog(this, "Product not found: " + productName, "Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit if the product ID is invalid
            }
            saleItems.add(new SaleItem(productId, quantity, price));
        }

        // Calculate VAT (example: 12% of subtotal)
        vat = subtotal * 0.12; // Adjust VAT calculation as needed
        total = subtotal + vat;

        // Get amount and change from fields
        double amount = 0.0;
        double amountChange = 0.0;

        try {
            amount = Double.parseDouble(amountFld.getText()); // Get amount from amountFld
            amountChange = Double.parseDouble(changeFld.getText()); // Get change from changeFld
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid amount or change value.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit if the values are invalid
        }

        // Create an instance of SalesManagementMethod to add the sale
        SalesManagementMethod salesManager = new SalesManagementMethod();
        // Pass sale items along with employee details and amounts
        salesManager.addSale(employeeId, employeeName, subtotal, vat, total, amount, amountChange, saleItems);

        // Notify user of success
        JOptionPane.showMessageDialog(this, "Sale added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

        // Optionally clear the order table after sale
        model.setRowCount(0); // Clear order table
    }

    private int getProductIdByName(String productName) {
        int productId = 0; // Placeholder for product ID
        String query = "SELECT product_id FROM tbl_products WHERE product_name = ?"; // Updated SQL query

        sqlConnector callConnector = new sqlConnector();

        try (Connection conn = callConnector.createConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, productName);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                productId = rs.getInt("product_id"); // Use the correct column name
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        return productId; // Return the found product ID
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UserImageIcon;
    private javax.swing.JTextField amountFld;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JPanel btnOption;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JTextField changeFld;
    private javax.swing.JLabel changeLabel;
    private javax.swing.JPanel coffeeGrid;
    private javax.swing.JLabel employeNamerTxt;
    private javax.swing.JLabel employeeRoleTxt;
    private javax.swing.JPanel header;
    private javax.swing.JPanel itemDetails;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel navbarLeft;
    private javax.swing.JButton nxtButton;
    private javax.swing.JTable orderTable;
    private javax.swing.JLabel pageLabelTxt;
    private javax.swing.JButton previousButton;
    private javax.swing.JScrollPane productTable;
    private javax.swing.JPanel searchBar;
    private javax.swing.JTextField searchText;
    private javax.swing.JPanel snackGrid;
    private javax.swing.JTextField subtotalFld;
    private javax.swing.JPanel teaGrid;
    private javax.swing.JTextField totalFld;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField vatFld;
    // End of variables declaration//GEN-END:variables
}
